#1 - <Restaurant name> - <Dish name> - <Final Price>
#2 - <Restaurant name> - <Dish name> - <Final Price>
#3 - <Restaurant name> - <Dish name> - <Final Price>
#4 - <Restaurant name> - <Dish name> - <Final Price>
#5 - <Restaurant name> - <Dish name> - <Final Price>




  const express = require('express')
  const app = express()
  const puppeteer = require('puppeteer');
  const nodemailer = require('nodemailer');

const {getLinks} = require('./getRestuarntsLink');

let resturantsAndDishes = `Restuarnts are :`
let counter = 0;

app.get('/',(req,res)=>{
   res.send("Swiggy Restuarnt Webscrapping WebSite")
})

app.get('/dish',(req,res)=>{
  res.send("Working")
})

const Mailer = (email)=>{
  let requiredResturantData =  resturantsAndDishes
    let transporter = nodemailer.createTransport({
    service:"gmail",  
    auth:{
        user:"1ms19is119@gmail.com",
        pass:"popoqibpxuxpclbr"
    },
    tls:{
        rejectUnauthorized : false
    },
    secure : false
})


    let mailOptions = {
        from :"1ms19is119@gmail.com",
        to: email.replace(/['"]+/g, '') || "sudeepck29@gmail.com",
        subject:"Swiggy.com",
        text:"Firts Email Using Nodejs" +" " +  requiredResturantData ,
        html: requiredResturantData,
        amp:`${requiredResturantData}`,
        secure : false,
    }

      transporter.sendMail(mailOptions,function(err,success){
        if(err){
          console.log(err);
        }else{
            console.log(success)
        }
      })  
}


app.get('/dishes',async(req,res)=>{
  try{
    let {city,restaurants,email,maximum,minimum} = req.query

    const resturantData = main(city,restaurants,maximum,minimum);
    req.dishes =  resturantData
    Mailer(email,resturantData)
    console.log(resturantData)
    res.send(`The Message Will be Sent to ${email}`)
  }catch(err){
    console.log(err);
  }
})


var port = process.env.PORT || 3000;
app.listen(port,()=>console.log(`Successfully connected to Servere ${port}`))



async function Getdata(url,page,filteredRestuarnt,maximum,minimum) {
      let maximumpriceLimit = Number(maximum);
      let minimumPriceLimt = Number(minimum);

      await page.setDefaultNavigationTimeout(0);
      await page.goto(url);
      await page.waitForSelector('[data-testid="normal-dish-item"] > div > div:first-of-type');

      // Extract dish data
      let dishes = [];
      let dishElements = await page.$$('[data-testid="normal-dish-item"] > div > div:first-of-type');
      const hotelName =  await page.$eval('h1',n=>n.title)
     
      //Apply Offer if existes
      let BestOffer =  await page.$eval('._3lvLZ',n => n.innerText)
      BestOffer = BestOffer.split(" ")
      let percentage = Number(BestOffer[0].substring(0,BestOffer[0].length-1));
      limit = Number(BestOffer[4].substring(1,BestOffer[4].length)) 
      let filteredDishes =[]
      let limitDiscount = ""
      if(BestOffer[BestOffer.length-2] === 'Above' ){ 
        limitDiscount = Number(BestOffer[BestOffer.length-1].substring(1));
      }

      

    // Check if Restaurant is present in Query Filter
      if(!filteredRestuarnt.includes(hotelName) && filteredRestuarnt.length > 0){
         return  { [hotelName] : { dishes : filteredDishes }}
      }
           
    
      for (const dishElement of dishElements) {  
        const dishName = await dishElement.$eval('h3', node => node.textContent);
        let dishPrice = Number(await dishElement.$eval('.rupee', node => node.textContent));
        let discount = (dishPrice * (percentage) / 100)
        let dishPriceAfterDiscount = discount < limit ? Number(dishPrice - discount) :  Number(dishPrice - limit);

        if(isNaN(dishPriceAfterDiscount)){
            dishes.push({ dishName, dishPrice})
             if(dishPrice >= minimumPriceLimt && dishPrice <= maximumpriceLimit) {
                counter++;
                resturantsAndDishes += `<br/> ${counter} . ${hotelName} : ${dishName}  ₹${Number(dishPrice)}` 
             }
        }else{
            dishes.push({ dishName, dishPrice: dishPriceAfterDiscount}); 
           if(dishPriceAfterDiscount >= minimumPriceLimt && dishPriceAfterDiscount <= maximumpriceLimit) {
              counter++;
            resturantsAndDishes += `<br/> ${counter} . ${hotelName} : ${dishName} ₹${Number(dishPriceAfterDiscount)}`
           }
        }   
    } 
    resturantsAndDishes +=`<br/> `
};

async function main(city,restaurants,maximum,minimum){
        const allLinks = await getLinks(city,restaurants);
        const browser = await puppeteer.launch({headless: true, args: ["--no-sandbox"]});
        let page = await browser.newPage();



        for(let link of allLinks.links){
          if(!isNaN(maximum) && !isNaN(minimum)){
              await Getdata(link,page,allLinks.filteredRestuarnt,maximum,minimum);
          }
          else{
            await Getdata(link,page,allLinks.filteredRestuarnt,150,100);
          }
        }   
    await browser.close()
    return resturantsAndDishes;
}



now 

  const express = require('express')
  const app = express()
  const puppeteer = require('puppeteer');
  const nodemailer = require('nodemailer');

const {getLinks} = require('./getRestuarntsLink');

let resturantsAndDishes = `Restuarnts are :`
let counter = 0;

app.get('/',(req,res)=>{
   res.send("Swiggy Restuarnt Webscrapping WebSite")
})

app.get('/dish',(req,res)=>{
  res.send("Working")
})

const Mailer = (email)=>{
  try{
  let requiredResturantData =  resturantsAndDishes
    let transporter = nodemailer.createTransport({
    service:"gmail",  
    auth:{
        user:"1ms19is119@gmail.com",
        pass:"popoqibpxuxpclbr"
    },
    tls:{
        rejectUnauthorized : false
    },
    secure : false
})


    let mailOptions = {
        from :"1ms19is119@gmail.com",
        to: email || "sudeepck29@gmail.com",
        subject:"Swiggy.com",
        text:"Firts Email Using Nodejs" +" " +  requiredResturantData ,
        html: requiredResturantData,
        amp:`${requiredResturantData}`,
        secure : false,
    }

      transporter.sendMail(mailOptions,function(err,success){
        if(err){
          console.log(err);
        }else{
            console.log(success)
        }
      })  
  }catch(err){
    console.log(err);
  }
}


app.get('/dishes',async(req,res)=>{
  try{
    let {city,restaurants,email,maximum,minimum,q} = req.query

    const resturantData = main(city,restaurants,maximum,minimum,q);
    req.dishes =  resturantData
    Mailer(email,resturantData)
    console.log(resturantData)
    res.send(`The Message Will be Sent to ${email}`)
  }catch(err){
    console.log(err);
  }
})


var port = process.env.PORT || 3000;
app.listen(port,()=>console.log(`Successfully connected to Servere ${port}`))



async function Getdata(url,page,filteredRestuarnt,maximum,minimum,q) {
      let maximumpriceLimit = Number(maximum);
      let minimumPriceLimt = Number(minimum);

      await page.setDefaultNavigationTimeout(0);
      await page.goto(url);
      await page.waitForSelector('[data-testid="normal-dish-item"] > div > div:first-of-type');

      // Extract dish data
      let dishes = [];
      let dishElements = await page.$$('[data-testid="normal-dish-item"] > div > div:first-of-type');
      const hotelName =  await page.$eval('h1',n=>n.title)
     
      //Apply Offer if existes
      let BestOffer =  await page.$eval('._3lvLZ',n => n.innerText)
      BestOffer = BestOffer.split(" ")
      let percentage = Number(BestOffer[0].substring(0,BestOffer[0].length-1));
      limit = Number(BestOffer[4].substring(1,BestOffer[4].length)) 
      let filteredDishes =[]
      let limitDiscount = ""

      if(BestOffer[BestOffer.length-2] === 'Above' ){ 
        limitDiscount = Number(BestOffer[BestOffer.length-1].substring(1));
      }

      

    // Check if Restaurant is present in Query Filter
      if(!filteredRestuarnt.includes(hotelName) && filteredRestuarnt.length > 0){
         return  { [hotelName] : { dishes : filteredDishes }}
      }
           
    
      for (const dishElement of dishElements) {  
        const dishName = await dishElement.$eval('h3', node => node.textContent);
        let dishPrice = Number(await dishElement.$eval('.rupee', node => node.textContent));
        let discount = (dishPrice * (percentage) / 100)
        let dishPriceAfterDiscount = discount < limit ? Number(dishPrice - discount) :  Number(dishPrice - limit);

        if(isNaN(dishPriceAfterDiscount)){
            dishes.push({ dishName, dishPrice})
             if(dishPrice >= minimumPriceLimt && dishPrice <= maximumpriceLimit) {
                counter++;
                if(typeof(limitDiscount) === 'number' &&  dishPriceAfterDiscount >= limitDiscount){
                     resturantsAndDishes += `<br/> ${counter} . ${hotelName} : ${dishName}  ₹${Number(dishPrice)} -${percentage}% `
                }else if(typeof(limitDiscount) === "string"){
                   resturantsAndDishes += `<br/> ${counter} . ${hotelName} : ${dishName}  ₹${Number(dishPrice)}  -${percentage}% `
                }
                
             }
        }else{
            dishes.push({ dishName, dishPrice: dishPriceAfterDiscount}); 
           if(dishPriceAfterDiscount >= minimumPriceLimt && dishPriceAfterDiscount <= maximumpriceLimit) {
              counter++;
              if(typeof(limitDiscount) === 'number' &&  dishPriceAfterDiscount >= limitDiscount){
                  resturantsAndDishes += `<br/> ${counter} . ${hotelName} : ${dishName} ₹${Number(dishPriceAfterDiscount)} -${percentage}%`
                  }else if(typeof(limitDiscount) === "string"){
                    resturantsAndDishes += `<br/> ${counter} . ${hotelName} : ${dishName} ₹${Number(dishPriceAfterDiscount)} -${percentage}%`
              }
            
           }
        }   
    } 
     if(!isNaN(q) && addedSomeValue == 1) {
          let neededDish = q.toLowerCase();
          if(!neededDish.indexOf(dishName.toLowerCase()) )
              resturantsAndDishes.substring(resturantsAndDisheslastIndexOf("\n") + 1, -1 )
      }    
    resturantsAndDishes +=`<br/> `
};

async function main(city,restaurants,maximum,minimum){
        const allLinks = await getLinks(city,restaurants);
        const browser = await puppeteer.launch({headless: true, args: ["--no-sandbox"]});
        let page = await browser.newPage();
        
        let maximumValue = 150
        let minimumValue = 100

        if(!isNaN(maximum) && !isNaN(minimum)){
          maximumValue = Number(maximum);
          minimumValue = Number(minimum);
        }

        for(let link of allLinks.links){
            await Getdata(link,page,allLinks.filteredRestuarnt,maximumValue,minimumValue,q);
        }   
    await browser.close()
    return resturantsAndDishes;
}



